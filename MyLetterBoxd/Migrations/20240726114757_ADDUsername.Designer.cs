// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyLetterBoxd.Database;

#nullable disable

namespace MyLetterBoxd.Migrations
{
    [DbContext(typeof(MyLetterBoxdContext))]
    [Migration("20240726114757_ADDUsername")]
    partial class ADDUsername
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MyLetterBoxd.Models.Entertainment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Actors")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Directors")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EntertainmentType")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Entertainments", (string)null);

                    b.HasDiscriminator<int>("EntertainmentType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyLetterBoxd.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "password",
                            Username = "JD"
                        },
                        new
                        {
                            ID = 2,
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "password",
                            Username = "JM"
                        });
                });

            modelBuilder.Entity("MyLetterBoxd.Models.UserEntertainment", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("EntertainmentID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "EntertainmentID");

                    b.HasIndex("EntertainmentID");

                    b.ToTable("UserEntertainments");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            EntertainmentID = 1
                        },
                        new
                        {
                            UserID = 1,
                            EntertainmentID = 2
                        },
                        new
                        {
                            UserID = 2,
                            EntertainmentID = 4
                        });
                });

            modelBuilder.Entity("MyLetterBoxd.Models.Film", b =>
                {
                    b.HasBaseType("MyLetterBoxd.Models.Entertainment");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Actors = "[\"Leonardo DiCaprio\"]",
                            Directors = "[\"Christopher Nolan\"]",
                            Genre = "Sci-Fi",
                            Rating = 4,
                            Title = "Inception"
                        },
                        new
                        {
                            ID = 2,
                            Actors = "[\"Keanu Reeves\"]",
                            Directors = "[\"The Wachowskis\"]",
                            Genre = "Sci-Fi",
                            Rating = 4,
                            Title = "The Matrix"
                        });
                });

            modelBuilder.Entity("MyLetterBoxd.Models.Serie", b =>
                {
                    b.HasBaseType("MyLetterBoxd.Models.Entertainment");

                    b.Property<int>("Seasons")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            ID = 3,
                            Actors = "[\"Bryan Cranston\"]",
                            Directors = "[\"Vince Gilligan\"]",
                            Genre = "Crime",
                            Rating = 4,
                            Title = "Breaking Bad",
                            Seasons = 5
                        },
                        new
                        {
                            ID = 4,
                            Actors = "[\"Winona Ryder\"]",
                            Directors = "[\"The Duffer Brothers\"]",
                            Genre = "Sci-Fi",
                            Rating = 3,
                            Title = "Stranger Things",
                            Seasons = 4
                        });
                });

            modelBuilder.Entity("MyLetterBoxd.Models.UserEntertainment", b =>
                {
                    b.HasOne("MyLetterBoxd.Models.Entertainment", "Entertainment")
                        .WithMany("UserEntertainments")
                        .HasForeignKey("EntertainmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyLetterBoxd.Models.User", "User")
                        .WithMany("UserEntertainments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entertainment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyLetterBoxd.Models.Entertainment", b =>
                {
                    b.Navigation("UserEntertainments");
                });

            modelBuilder.Entity("MyLetterBoxd.Models.User", b =>
                {
                    b.Navigation("UserEntertainments");
                });
#pragma warning restore 612, 618
        }
    }
}
